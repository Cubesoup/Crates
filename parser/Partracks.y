-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Partracks where
import Abstracks
import Lextracks
import ErrM

}

%name pListString ListString
%name pListInteger ListInteger
%name pListReleaseBlock ListReleaseBlock
%name pListTrackBlock ListTrackBlock
%name pTrackBlock TrackBlock
%name pReleaseBlock ReleaseBlock
%name pCrateBlock CrateBlock

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  ',' { PT _ (TS _ 1) }
  ';' { PT _ (TS _ 2) }
  '=' { PT _ (TS _ 3) }
  'artists' { PT _ (TS _ 4) }
  'bpm' { PT _ (TS _ 5) }
  'crate' { PT _ (TS _ 6) }
  'cues' { PT _ (TS _ 7) }
  'duration' { PT _ (TS _ 8) }
  'genre' { PT _ (TS _ 9) }
  'label' { PT _ (TS _ 10) }
  'location' { PT _ (TS _ 11) }
  'release' { PT _ (TS _ 12) }
  'releases' { PT _ (TS _ 13) }
  'title' { PT _ (TS _ 14) }
  'track' { PT _ (TS _ 15) }
  'tracks' { PT _ (TS _ 16) }
  'year' { PT _ (TS _ 17) }
  '{' { PT _ (TS _ 18) }
  '}' { PT _ (TS _ 19) }

L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }


%%

String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

ListString :: { [String] }
ListString : {- empty -} { [] } 
  | String ListString { (:) $1 $2 }
  | {- empty -} { [] }
  | String { (:[]) $1 }
  | String ';' ListString { (:) $1 $3 }


ListInteger :: { [Integer] }
ListInteger : {- empty -} { [] } 
  | Integer ListInteger { (:) $1 $2 }
  | {- empty -} { [] }
  | Integer { (:[]) $1 }
  | Integer ';' ListInteger { (:) $1 $3 }


ListReleaseBlock :: { [ReleaseBlock] }
ListReleaseBlock : {- empty -} { [] } 
  | ReleaseBlock ListReleaseBlock { (:) $1 $2 }
  | {- empty -} { [] }
  | ReleaseBlock { (:[]) $1 }
  | ReleaseBlock ';' ListReleaseBlock { (:) $1 $3 }


ListTrackBlock :: { [TrackBlock] }
ListTrackBlock : {- empty -} { [] } 
  | TrackBlock ListTrackBlock { (:) $1 $2 }
  | {- empty -} { [] }
  | TrackBlock { (:[]) $1 }
  | TrackBlock ';' ListTrackBlock { (:) $1 $3 }


TrackBlock :: { TrackBlock }
TrackBlock : 'track' '{' 'title' '=' String ',' 'location' '=' String ',' 'artists' '=' ListString ',' 'bpm' '=' Integer ',' 'duration' '=' Integer ',' 'cues' '=' ListInteger ',' 'genre' '=' String '}' { PTrack $5 $9 $13 $17 $21 $25 $29 } 


ReleaseBlock :: { ReleaseBlock }
ReleaseBlock : 'release' '{' 'title' '=' String ',' 'year' '=' Integer ',' 'label' '=' String ',' 'tracks' '=' ListString '}' { PRelease $5 $9 $13 $17 } 


CrateBlock :: { CrateBlock }
CrateBlock : 'crate' '{' 'title' '=' String ',' 'tracks' '=' ListTrackBlock ',' 'releases' '=' ListReleaseBlock '}' { PCrate $5 $9 $13 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

